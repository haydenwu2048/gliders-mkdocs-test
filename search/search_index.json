{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Gliders Documentation \ud83d\ude80","text":"<p>Choose where to start:</p> <ul> <li>How-to Guides</li> <li>Glider Data Pipeline</li> </ul>"},{"location":"gdp/gdp/","title":"Glider Data Pipeline","text":""},{"location":"gdp/gdp/#overview","title":"Overview","text":"<p>GDP (Glider Data Pipeline) is a program which can automatically process realtime and delayed slcoum dataset.</p> <p>Repo: https://gitlab.oceantrack.org/ceotr/gliders/gdp</p>"},{"location":"gdp/gdp/#rundeck-jobs","title":"Rundeck Jobs","text":"<p>Both realtime and delayed mode process handled by Rundeck server</p> <ul> <li>Relatime</li> <li>Delayed</li> </ul>"},{"location":"gdp/gdp/#setup","title":"Setup","text":"<p>Requirements:</p> <ul> <li>postgres database</li> <li>GenerateDatasetsXml</li> <li>Linux server</li> </ul> <pre><code>git clone git@gitlab.oceantrack.org:ceotr/gliders/gdp.git\ncd gdp\nconda env create -f environemtn.yml\nsource activate GDP\npython manage.py migrate\npython manage.py slocum_run\n# for the first run, it will throw out the exception for fill out pw_info.yml\n</code></pre>"},{"location":"gdp/gdp/#useful-commands","title":"Useful Commands","text":"<p>Autodetect mission and processing commands</p> <ul> <li>process slocum realtime mission</li> <li>process high resolution data for most recent unprocessed slocum mission</li> <li>process high resolution data for mission 136</li> </ul>"},{"location":"gdp/gdp/#database","title":"Database","text":"<p>Database chosen: Postgres Purpose:</p> <ul> <li>Record data processing status.</li> </ul> <p>Goals:</p> <ol> <li>Tracking data files' processed status</li> <li>Tracking missions' processed status</li> <li>Able to handler multiprocess</li> </ol>"},{"location":"gdp/gdp/#structure","title":"Structure","text":"<ul> <li>Mission table</li> <li>Mission_process table</li> <li>Process_dir table</li> <li>Process_files table</li> </ul>"},{"location":"gdp/gdp/#modules","title":"Modules","text":"<ul> <li>conf:<ul> <li>The module works with setting and configurations</li> </ul> </li> <li>core:<ul> <li>Pipeline major logic</li> </ul> </li> <li>db:<ul> <li>Handle database stuff</li> </ul> </li> <li>engine:<ul> <li>Module for place data processors</li> </ul> </li> <li>management:<ul> <li>Place for commands, and start point of the program</li> </ul> </li> <li>meta:<ul> <li>Modules stream data from sensor_tracker Restful api server</li> </ul> </li> <li>Parser:<ul> <li>For parsers, Planning to remove</li> </ul> </li> <li>Utils:<ul> <li>Random useful functions</li> </ul> </li> </ul>"},{"location":"gdp/gdp/#code-and-design","title":"Code and Design","text":"<p>OOP High level abstract design diagram </p> <p>Workflow </p> <p>File Structure </p>"},{"location":"gdp/gdp/#folder-explanation","title":"Folder Explanation","text":"<ul> <li>Engine: place for data process code</li> <li>Component: place for useful tools which can be shared in the GDP project</li> <li>contribute: place to add steps</li> <li>core: place to define GDP bone and workflow</li> </ul>"},{"location":"gdp/gdp/#meta-generator","title":"Meta Generator","text":"<p>Meta-Generator is a module of GDP which can be used to generate meta JSON files. The meta JSON files will be used to generate nc files. Meta JSON files contain almost all the Metadata for a glider dataset except few such as</p> <p>dataset_ids, dataset_title and etc.</p> <p></p> <p>There are three major steps for the meta-generator to generate the Meta JSON files</p> <ol> <li>Request and reformat data from the sensor tracker </li> <li>The meta-generator used sensor tracker's Deployment Hierarchy API endpoint for data request</li> <li>Apply filters to the data</li> <li>Feed the data to the JSON template</li> </ol> <p>Then write the JSON files to the disk. </p>"},{"location":"how/gitlab-repo-ssh/","title":"How to clone a GitLab repository with SSH","text":""},{"location":"how/gitlab-repo-ssh/#step-0-generate-an-ssh-key-pair-locally","title":"Step 0: Generate an SSH key pair locally","text":"<p>See How to generate an SSH key pair for more details.</p>"},{"location":"how/gitlab-repo-ssh/#step-1-copy-your-public-key","title":"Step 1: Copy your public key","text":"<p>You can now use the public key (<code>~/.ssh/id_rsa.pub</code>) to authenticate on remote servers or services. To copy it to your clipboard, you can use the <code>cat</code> command and pipe it to <code>pbcopy</code> (on macOS) or xclip (on Linux):</p> macOSLinux (with <code>xclip</code> installed) <pre><code>cat ~/.ssh/id_rsa.pub | pbcopy\n</code></pre> <pre><code>cat ~/.ssh/id_rsa.pub | xclip -sel clip\n</code></pre>"},{"location":"how/gitlab-repo-ssh/#step-2-set-up-your-ssh-key-on-gitlab","title":"Step 2: Set up your SSH key on GitLab","text":"<p>Click the Edit profile button, or go to your GitLab profile page: <code>https://gitlab.oceantrack.org/-/profile</code></p> <p></p> <p>Paste your public key in the Key text area and click the Add key button to add the key.</p>"},{"location":"how/gitlab-repo-ssh/#step-3-copy-the-ssh-url-and-clone-the-repository","title":"Step 3: Copy the SSH URL and clone the repository","text":"<p>Navigate to your desired directory and clone a Git repository with the SSH URL, for example:</p> <pre><code>git clone git@gitlab.oceantrack.org:ceotr/practice_lab/tiny-python-projects.git\n</code></pre> <p>Tip</p> <p>If you want to clone a specific branch of a Git repository, you can do so by specifying the branch you want to clone after the repository URL.</p> <p>For example, if you wanted to clone the dev (development) branch from the above repository (if the branch exists):</p> <pre><code>git clone -b dev git@gitlab.oceantrack.org:ceotr/practice_lab/tiny-python-projects.git\n</code></pre>"},{"location":"how/gitlab-repo-ssh/#resources","title":"Resources","text":"<p>Use SSH keys to communicate with GitLab | GitLab Docs </p>"},{"location":"how/ssh-key/","title":"How to generate an SSH key pair","text":""},{"location":"how/ssh-key/#step-0-check-if-you-have-an-existing-ssh-key-pair","title":"Step 0: Check if you have an existing SSH key pair","text":"<p>To check if you already have an SSH key pair on your local machine (macOS or Linux), you can follow these steps:</p> <ol> <li> <p>Open a terminal or command prompt on your local machine.</p> </li> <li> <p>Navigate to your SSH directory by entering the following command:</p> </li> </ol> <pre><code>cd ~/.ssh\nls\n</code></pre> <p>The above command will display the files and directories within the <code>.ssh</code> directory.</p> <p>If you already have an SSH key pair, you should see one or more files with names similar to the following:</p> <ul> <li> <p><code>id_rsa</code> (private key)</p> </li> <li> <p><code>id_rsa.pub</code> (public key)</p> </li> <li> <p><code>id_dsa</code> (private key)</p> </li> <li> <p><code>id_dsa.pub</code> (public key)</p> </li> </ul> <p>The <code>.pub</code> files represent the public keys, while the files without the .pub extension are the private keys.</p> <p>If you see the key files listed, it means you already have an SSH key pair on your local machine. If the files are not present or the directory doesn't exist, you don't have an SSH key pair yet and can proceed with generating one using the ssh-keygen command.</p>"},{"location":"how/ssh-key/#step-1-generate-ssh-key-pair","title":"Step 1: Generate SSH key pair","text":"<p>If you do not have an SSH key pair, on your local machine, open a terminal or command prompt and run the following command to generate an SSH key pair:</p> rsaed25519 <pre><code>ssh-keygen -t rsa -b 2048 -C \"your_email@example.com\"\n</code></pre> <pre><code>ssh-keygen -t ed25519 -C \"your_email@example.com\"\n</code></pre> <p>Warning</p> <p>If you\u2019re using the latest macOS, it\u2019s highly recommended to use the ed25519 algorithm to generate your SSH keys; otherwise, you might need to update the SSH configuration file to support the rsa option.</p> <p>Copy the Public Key on macOS: Use the pbcopy command to copy the contents of the public key to your clipboard, suppose the name of your public key is <code>id_ed25519.pub</code>:</p> <pre><code>pbcopy &lt; ~/.ssh/id_ed25519.pub\n</code></pre>"}]}